{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { Raycaster, Vector2 } from 'three';\n\nexport class InteractiveObject {\n  target: THREE.Object3D;\n  name: string;\n  intersected: boolean;\n  wasIntersected: boolean = false;\n  distance: number;\n  constructor(target: THREE.Object3D, name: string) {\n    this.target = target;\n    this.name = name;\n    this.intersected = false;\n    this.distance = 0;\n  }\n}\n\nexport class InteractiveEvent {\n  type: string;\n  cancelBubble: boolean;\n  originalEvent: Event | null;\n\n  // Dummy default values\n  coords: Vector2 = new Vector2(0, 0);\n  distance: number = 0;\n  intersected: boolean = false;\n\n  constructor(type: string, originalEvent: Event | null = null) {\n    this.cancelBubble = false;\n    this.type = type;\n    this.originalEvent = originalEvent;\n  }\n  stopPropagation() {\n    this.cancelBubble = true;\n  }\n}\n\nexport class InteractionManagerOptions {\n  bindEventsOnBodyElement: boolean = true;\n  autoAdd: boolean = false;\n  scene: THREE.Scene | null = null;\n\n  constructor(options: {\n    bindEventsOnBodyElement?: boolean | undefined;\n    autoAdd?: boolean | undefined;\n    scene?: THREE.Scene | undefined;\n  }) {\n    if (options && typeof options.bindEventsOnBodyElement !== 'undefined') {\n      this.bindEventsOnBodyElement = options.bindEventsOnBodyElement;\n    }\n    if (options && typeof options.scene !== 'undefined') {\n      this.scene = options.scene;\n    }\n    if (options && typeof options.autoAdd !== 'undefined') {\n      this.autoAdd = options.autoAdd;\n    }\n  }\n}\n\nexport class InteractionManager {\n  renderer: THREE.Renderer;\n  camera: THREE.Camera;\n  domElement: HTMLElement;\n  bindEventsOnBodyElement: boolean;\n  autoAdd: boolean;\n  scene: THREE.Scene | null;\n  mouse: Vector2;\n  supportsPointerEvents: boolean;\n  interactiveObjects: InteractiveObject[];\n  closestObject: InteractiveObject | null;\n  raycaster: THREE.Raycaster;\n  treatTouchEventsAsMouseEvents: boolean;\n\n  constructor(\n    renderer: THREE.Renderer,\n    camera: THREE.Camera,\n    domElement: HTMLElement,\n    options?: InteractionManagerOptions\n  ) {\n    this.renderer = renderer;\n    this.camera = camera;\n    this.domElement = domElement;\n    this.bindEventsOnBodyElement =\n      options && typeof options.bindEventsOnBodyElement !== 'undefined'\n        ? options.bindEventsOnBodyElement\n        : true;\n\n    this.scene =\n      options && typeof options.scene !== 'undefined' ? options.scene : null;\n    if (this.scene) {\n      this.scene.onBeforeRender = () => {\n        if (this.autoAdd && this.scene !== null) {\n          this.scene.traverse((object) => {\n            this.add(object);\n\n            object.addEventListener('removed', (o) => {\n              this.remove(o.target);\n            });\n          });\n        }\n\n        this.update();\n      };\n    }\n    this.autoAdd =\n      options && typeof options.autoAdd !== 'undefined'\n        ? options.autoAdd\n        : false;\n\n    if (this.autoAdd && this.scene === null) {\n      console.error(\n        'Attention: Options.scene needs to be set when using options.autoAdd'\n      );\n    }\n\n    this.mouse = new Vector2(-1, 1); // top left default position\n\n    this.supportsPointerEvents = !!window.PointerEvent;\n\n    this.interactiveObjects = [];\n    this.closestObject = null;\n\n    this.raycaster = new Raycaster();\n\n    domElement.addEventListener('click', this.onMouseClick);\n\n    if (this.supportsPointerEvents) {\n      if (this.bindEventsOnBodyElement) {\n        domElement.ownerDocument.addEventListener(\n          'pointermove',\n          this.onDocumentPointerMove\n        );\n      } else {\n        domElement.addEventListener('pointermove', this.onDocumentPointerMove);\n      }\n      domElement.addEventListener('pointerdown', this.onPointerDown);\n      domElement.addEventListener('pointerup', this.onPointerUp);\n    }\n\n    if (this.bindEventsOnBodyElement) {\n      domElement.ownerDocument.addEventListener(\n        'mousemove',\n        this.onDocumentMouseMove\n      );\n    } else {\n      domElement.addEventListener('mousemove', this.onDocumentMouseMove);\n    }\n    domElement.addEventListener('mousedown', this.onMouseDown);\n    domElement.addEventListener('mouseup', this.onMouseUp);\n    domElement.addEventListener('touchstart', this.onTouchStart, {\n      passive: true,\n    });\n    domElement.addEventListener('touchmove', this.onTouchMove, {\n      passive: true,\n    });\n    domElement.addEventListener('touchend', this.onTouchEnd, {\n      passive: true,\n    });\n\n    this.treatTouchEventsAsMouseEvents = true;\n  }\n\n  dispose = () => {\n    this.domElement.removeEventListener('click', this.onMouseClick);\n\n    if (this.supportsPointerEvents) {\n      if (this.bindEventsOnBodyElement) {\n        this.domElement.ownerDocument.removeEventListener(\n          'pointermove',\n          this.onDocumentPointerMove\n        );\n      } else {\n        this.domElement.removeEventListener(\n          'pointermove',\n          this.onDocumentPointerMove\n        );\n      }\n      this.domElement.removeEventListener('pointerdown', this.onPointerDown);\n      this.domElement.removeEventListener('pointerup', this.onPointerUp);\n    }\n\n    if (this.bindEventsOnBodyElement) {\n      this.domElement.ownerDocument.removeEventListener(\n        'mousemove',\n        this.onDocumentMouseMove\n      );\n    } else {\n      this.domElement.removeEventListener(\n        'mousemove',\n        this.onDocumentMouseMove\n      );\n    }\n    this.domElement.removeEventListener('mousedown', this.onMouseDown);\n    this.domElement.removeEventListener('mouseup', this.onMouseUp);\n    this.domElement.removeEventListener('touchstart', this.onTouchStart);\n    this.domElement.removeEventListener('touchmove', this.onTouchMove);\n    this.domElement.removeEventListener('touchend', this.onTouchEnd);\n  };\n\n  add = (object: THREE.Object3D, childNames: string[] = []) => {\n    if (object && !this.interactiveObjects.find((i) => i.target === object)) {\n      if (childNames.length > 0) {\n        childNames.forEach((name) => {\n          const o = object.getObjectByName(name);\n          if (o) {\n            const interactiveObject = new InteractiveObject(o, name);\n            this.interactiveObjects.push(interactiveObject);\n          }\n        });\n      } else {\n        const interactiveObject = new InteractiveObject(object, object.name);\n        this.interactiveObjects.push(interactiveObject);\n      }\n    }\n  };\n\n  remove = (object: THREE.Object3D, childNames: string[] = []) => {\n    if (!object) return;\n\n    if (childNames.length > 0) {\n      childNames.forEach((name) => {\n        const child = object.getObjectByName(name);\n        if (child) {\n          this.interactiveObjects = this.interactiveObjects.filter(\n            (o) => o.target !== child\n          );\n        }\n      });\n    } else {\n      this.interactiveObjects = this.interactiveObjects.filter(\n        (o) => o.target !== object\n      );\n    }\n  };\n\n  update = () => {\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    this.interactiveObjects.forEach((object) => {\n      if (object.target) this.checkIntersection(object);\n    });\n\n    this.interactiveObjects.sort(function (a, b) {\n      return a.distance - b.distance;\n    });\n\n    const newClosestObject =\n      this.interactiveObjects.find((object) => object.intersected) ?? null;\n    if (newClosestObject != this.closestObject) {\n      if (this.closestObject) {\n        const eventOutClosest = new InteractiveEvent('mouseout');\n        this.dispatch(this.closestObject, eventOutClosest);\n      }\n      if (newClosestObject) {\n        const eventOverClosest = new InteractiveEvent('mouseover');\n        this.dispatch(newClosestObject, eventOverClosest);\n      }\n      this.closestObject = newClosestObject;\n    }\n\n    let eventLeave: InteractiveEvent;\n    this.interactiveObjects.forEach((object) => {\n      if (!object.intersected && object.wasIntersected) {\n        if (!eventLeave) {\n          eventLeave = new InteractiveEvent('mouseleave');\n        }\n        this.dispatch(object, eventLeave);\n      }\n    });\n    let eventEnter: InteractiveEvent;\n    this.interactiveObjects.forEach((object) => {\n      if (object.intersected && !object.wasIntersected) {\n        if (!eventEnter) {\n          eventEnter = new InteractiveEvent('mouseenter');\n        }\n        this.dispatch(object, eventEnter);\n      }\n    });\n  };\n\n  checkIntersection = (object: InteractiveObject) => {\n    const intersects = this.raycaster.intersectObjects([object.target], true);\n\n    object.wasIntersected = object.intersected;\n\n    if (intersects.length > 0) {\n      let distance = intersects[0].distance;\n      intersects.forEach((i) => {\n        if (i.distance < distance) {\n          distance = i.distance;\n        }\n      });\n      object.intersected = true;\n      object.distance = distance;\n    } else {\n      object.intersected = false;\n    }\n  };\n\n  onDocumentMouseMove = (mouseEvent: MouseEvent) => {\n    // event.preventDefault();\n\n    this.mapPositionToPoint(this.mouse, mouseEvent.clientX, mouseEvent.clientY);\n\n    const event = new InteractiveEvent('mousemove', mouseEvent);\n\n    this.interactiveObjects.forEach((object) => {\n      this.dispatch(object, event);\n    });\n  };\n\n  onDocumentPointerMove = (pointerEvent: PointerEvent) => {\n    // event.preventDefault();\n\n    this.mapPositionToPoint(\n      this.mouse,\n      pointerEvent.clientX,\n      pointerEvent.clientY\n    );\n\n    const event = new InteractiveEvent('pointermove', pointerEvent);\n\n    this.interactiveObjects.forEach((object) => {\n      this.dispatch(object, event);\n    });\n  };\n\n  onTouchMove = (touchEvent: TouchEvent) => {\n    // event.preventDefault();\n\n    if (touchEvent.touches.length > 0) {\n      this.mapPositionToPoint(\n        this.mouse,\n        touchEvent.touches[0].clientX,\n        touchEvent.touches[0].clientY\n      );\n    }\n\n    const event = new InteractiveEvent(\n      this.treatTouchEventsAsMouseEvents ? 'mousemove' : 'touchmove',\n      touchEvent\n    );\n\n    this.interactiveObjects.forEach((object) => {\n      this.dispatch(object, event);\n    });\n  };\n\n  onMouseClick = (mouseEvent: MouseEvent) => {\n    this.update();\n\n    const event = new InteractiveEvent('click', mouseEvent);\n\n    this.interactiveObjects.forEach((object) => {\n      if (object.intersected) {\n        this.dispatch(object, event);\n      }\n    });\n  };\n\n  onMouseDown = (mouseEvent: MouseEvent) => {\n    this.mapPositionToPoint(this.mouse, mouseEvent.clientX, mouseEvent.clientY);\n\n    this.update();\n\n    const event = new InteractiveEvent('mousedown', mouseEvent);\n\n    this.interactiveObjects.forEach((object) => {\n      if (object.intersected) {\n        this.dispatch(object, event);\n      }\n    });\n  };\n\n  onPointerDown = (pointerEvent: PointerEvent) => {\n    this.mapPositionToPoint(\n      this.mouse,\n      pointerEvent.clientX,\n      pointerEvent.clientY\n    );\n\n    this.update();\n\n    const event = new InteractiveEvent('pointerdown', pointerEvent);\n\n    this.interactiveObjects.forEach((object) => {\n      if (object.intersected) {\n        this.dispatch(object, event);\n      }\n    });\n  };\n\n  onTouchStart = (touchEvent: TouchEvent) => {\n    if (touchEvent.touches.length > 0) {\n      this.mapPositionToPoint(\n        this.mouse,\n        touchEvent.touches[0].clientX,\n        touchEvent.touches[0].clientY\n      );\n    }\n\n    this.update();\n\n    const event = new InteractiveEvent(\n      this.treatTouchEventsAsMouseEvents ? 'mousedown' : 'touchstart',\n      touchEvent\n    );\n\n    this.interactiveObjects.forEach((object) => {\n      if (object.intersected) {\n        this.dispatch(object, event);\n      }\n    });\n  };\n\n  onMouseUp = (mouseEvent: MouseEvent) => {\n    const event = new InteractiveEvent('mouseup', mouseEvent);\n\n    this.interactiveObjects.forEach((object) => {\n      this.dispatch(object, event);\n    });\n  };\n\n  onPointerUp = (pointerEvent: PointerEvent) => {\n    const event = new InteractiveEvent('pointerup', pointerEvent);\n\n    this.interactiveObjects.forEach((object) => {\n      this.dispatch(object, event);\n    });\n  };\n\n  onTouchEnd = (touchEvent: TouchEvent) => {\n    if (touchEvent.touches.length > 0) {\n      this.mapPositionToPoint(\n        this.mouse,\n        touchEvent.touches[0].clientX,\n        touchEvent.touches[0].clientY\n      );\n    }\n\n    this.update();\n\n    const event = new InteractiveEvent(\n      this.treatTouchEventsAsMouseEvents ? 'mouseup' : 'touchend',\n      touchEvent\n    );\n\n    this.interactiveObjects.forEach((object) => {\n      this.dispatch(object, event);\n    });\n  };\n\n  dispatch = (object: InteractiveObject, event: InteractiveEvent) => {\n    if (object.target && !event.cancelBubble) {\n      event.coords = this.mouse;\n      event.distance = object.distance;\n      event.intersected = object.intersected;\n      object.target.dispatchEvent(event);\n    }\n  };\n\n  mapPositionToPoint = (point: Vector2, x: number, y: number) => {\n    const rect = this.renderer.domElement.getBoundingClientRect();\n\n    point.x = ((x - rect.left) / rect.width) * 2 - 1;\n    point.y = -((y - rect.top) / rect.height) * 2 + 1;\n  };\n}\n"],
  "mappings": "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",
  "names": ["Raycaster", "Vector2", "InteractiveObject", "target", "name", "InteractiveEvent", "type", "originalEvent", "InteractionManagerOptions", "options", "InteractionManager", "renderer", "camera", "domElement", "object", "o", "childNames", "i", "interactiveObject", "child", "a", "b", "newClosestObject", "eventOutClosest", "eventOverClosest", "eventLeave", "eventEnter", "intersects", "distance", "mouseEvent", "event", "pointerEvent", "touchEvent", "point", "x", "y", "rect"]
}
